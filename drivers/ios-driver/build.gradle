apply plugin: 'org.jetbrains.kotlin.multiplatform'

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        implementation deps.kotlin.stdlib.common
        api project (':sqldelight-runtime')
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
      }
    }
    nativeMain {
      dependencies {
        api deps.sqliter
        implementation deps.stately
      }
    }
    nativeTest {
      dependencies {
        implementation project(':drivers:driver-test')
        implementation deps.testhelp
      }
    }
  }

  targets {
    targetFromPreset(presets.iosX64, 'iosX64')
    targetFromPreset(presets.iosArm32, 'iosArm32')
    targetFromPreset(presets.iosArm64, 'iosArm64')
  }

  configure([targets.iosX64, targets.iosArm32, targets.iosArm64]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test.source(sourceSets.nativeTest)
    compilations.each {
      it.extraOpts("-linker-options", "-lsqlite3")
    }
  }
}

task iosTest {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn 'linkTestDebugExecutableIosX64'
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.iosX64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
    exec {
      commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"

/*publishing {
  publications.all {
    // Rewrite all artifacts from using the project name to just 'runtime'.
    artifactId = artifactId.replace(project.name, 'ios-driver')
  }
}*/

afterEvaluate {
  // Alias the task names we use elsewhere to the new task names.
  tasks.create('install').dependsOn('publishKotlinMultiplatformPublicationToMavenLocal')
  tasks.create('installLocally') {
    dependsOn 'publishMetadataPublicationToTestRepository'
    dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
    dependsOn 'publishIosX64PublicationToTestRepository'
    dependsOn 'publishIosArm32PublicationToTestRepository'
    dependsOn 'publishIosArm64PublicationToTestRepository'
  }
  // NOTE: We do not alias uploadArchives because CI runs it on Linux and we only want to run it on Mac OS.
  //tasks.create('uploadArchives').dependsOn('publishKotlinMultiplatformPublicationToMavenRepository')
}
