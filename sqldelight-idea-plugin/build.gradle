apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: "org.jetbrains.changelog"

intellij {
  updateSinceUntilBuild false
  version "IC-${versions.idea}"
  pluginName = 'SQLDelight'
  plugins = [
      "org.jetbrains.kotlin:${versions.ideaKotlin}-release-IJ${versions.idea}-1",
      "gradle",
      "java",
      "Groovy",
      "properties",
  ]
  // Uncomment to test against Android Studio
  // intellij.alternativeIdePath = '/Applications/Android Studio.app'
}

changelog {
  path = "$rootDir/CHANGELOG.md"
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getPluginToken() {
  return hasProperty('intellijPublishToken') ? intellijPublishToken : ""
}

publishPlugin {
  token = getPluginToken()
  channels(isReleaseBuild() ? 'Stable' : 'EAP')
}

sourceSets {
  main.java.srcDir "src/generated/kotlin"
}

dependencies {
  compile project(':sqldelight-compiler')

  compile deps.kotlin.stdlib.jdk
  compile deps.kotlin.reflect
  compile deps.bugsnag

  testCompile deps.truth
  testCompile project(':test-util')
}

def getBugsnagKey() {
  return hasProperty('SQLDELIGHT_BUGSNAG_KEY') ? SQLDELIGHT_BUGSNAG_KEY : ''
}

task bugsnagKey {
  def outputDir = file("src/generated/kotlin")
  def versionFile = file("$outputDir/com/squareup/sqldelight/intellij/Bugsnag.kt")

  inputs.property 'bugsnagKey', getBugsnagKey()
  outputs.file(versionFile)

  doLast {
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.squareup.sqldelight.intellij

internal val BUGSNAG_KEY = "${getBugsnagKey()}"
"""
  }
}
tasks.getByName('compileKotlin').dependsOn('bugsnagKey')
