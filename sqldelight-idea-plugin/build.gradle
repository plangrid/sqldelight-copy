apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.kordamp.gradle.markdown'

import com.squareup.sqldelight.tasks.ChangelogPruner

intellij {
  updateSinceUntilBuild false
  version "IC-${versions.idea}"
  pluginName = 'SQLDelight'
  plugins = [
      "org.jetbrains.kotlin:${versions.ideaKotlin}-release-IJ${versions.idea}-1",
      "gradle",
      "java",
      "Groovy",
      "properties",
  ]
  // Uncomment to test against Android Studio
  // intellij.alternativeIdePath = '/Applications/Android Studio.app'
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getPluginToken() {
  return hasProperty('intellijPublishToken') ? intellijPublishToken : ""
}

publishPlugin {
  token = getPluginToken()
  channels(isReleaseBuild() ? 'Stable' : 'EAP')
}

ext.tmpMarkdownInput = file("${buildDir}/markdown/pruned.md")
ext.htmlOutputDir = "${buildDir}/gen-html".toString()

task pruneChangeLog(type: ChangelogPruner) {
  changelog = rootProject.file("CHANGELOG.md")
  output = tmpMarkdownInput
}

markdownToHtml {
  dependsOn pruneChangeLog
  sourceDir = tmpMarkdownInput.parentFile
  outputDir = new File(htmlOutputDir)
  inputEncoding = 'UTF-8'
  outputEncoding = 'UTF-8'
}

patchPluginXml {
  dependsOn markdownToHtml
  changeNotes { new File(htmlOutputDir, 'pruned.html').readLines().join('\n') }
  version = VERSION_NAME.contains("SNAPSHOT") ? "$VERSION_NAME-${System.currentTimeMillis()}" : project.version
}

sourceSets {
  main.java.srcDir "src/generated/kotlin"
}

dependencies {
  compile project(':sqldelight-compiler')

  compile deps.kotlin.stdlib.jdk
  compile deps.kotlin.reflect
  compile deps.bugsnag

  testCompile deps.truth
  testCompile project(':test-util')
}

def getBugsnagKey() {
  return hasProperty('SQLDELIGHT_BUGSNAG_KEY') ? SQLDELIGHT_BUGSNAG_KEY : ''
}

task bugsnagKey {
  def outputDir = file("src/generated/kotlin")
  def versionFile = file("$outputDir/com/squareup/sqldelight/intellij/Bugsnag.kt")

  inputs.property 'bugsnagKey', getBugsnagKey()
  outputs.file(versionFile)

  doLast {
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.squareup.sqldelight.intellij

internal val BUGSNAG_KEY = "${getBugsnagKey()}"
"""
  }
}
tasks.getByName('compileKotlin').dependsOn('bugsnagKey')
