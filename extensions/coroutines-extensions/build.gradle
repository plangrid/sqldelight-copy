apply plugin: 'org.jetbrains.kotlin.multiplatform'

archivesBaseName = 'sqldelight-coroutines-extensions'

// TODO work around for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        api project(':sqldelight-runtime')
        api deps.kotlin.stdlib.common
        api deps.kotlin.coroutines.common
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.commonAnnotations
      }
    }
    jvmMain {
      dependencies {
        api deps.kotlin.stdlib.jdk
        api deps.kotlin.coroutines.jdk
      }
    }
    jvmTest {
      dependencies {
        implementation deps.kotlin.test.junit
        implementation project(':drivers:sqlite-driver')
      }
    }
    jsMain {
      dependencies {
        implementation deps.kotlin.stdlib.js
        implementation deps.kotlin.coroutines.js
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }
    nativeMain {
      dependencies {
        implementation deps.kotlin.coroutines.native
      }
    }
    nativeTest {
    }
  }

  targets {
    targetFromPreset(presets.jvm, 'jvm')
    targetFromPreset(presets.js, 'js') {
      tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
        moduleKind = 'umd'
        sourceMap = true
        metaInfo = true
      }
    }
    targetFromPreset(presets.iosX64, 'iosX64')
    targetFromPreset(presets.iosArm32, 'iosArm32')
    targetFromPreset(presets.iosArm64, 'iosArm64')
  }

  configure([targets.iosX64, targets.iosArm32, targets.iosArm64]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test.source(sourceSets.nativeTest)
  }
}

apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"

afterEvaluate {
  tasks.register('install') {
    dependsOn('publishToMavenLocal')
  }
  tasks.register('installLocally') {
    dependsOn('publishAllPublicationsToTestRepository')
  }
  // NOTE: We do not alias uploadArchives because CI runs it on Linux and we only want to run it on Mac OS.
  //tasks.register('uploadArchives').dependsOn('publishAllPublicationsToMavenRepository')
}
