apply plugin: 'org.jetbrains.kotlin.multiplatform'

archivesBaseName = 'sqldelight-coroutines-extensions'

// TODO work around for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        api project(':runtime')
        api deps.kotlin.coroutines
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.commonAnnotations
        implementation deps.stately.collections
        implementation deps.turbine
      }
    }
    jvmTest {
      dependencies {
        implementation deps.kotlin.test.junit
        implementation project(':drivers:sqlite-driver')
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }
    nativeMain {
      dependencies {
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}-native-mt") {
          force = true
        }
      }
    }
    nativeTest {
      dependencies {
        implementation project(':drivers:native-driver')
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}-native-mt") {
          force = true
        }
      }
    }
  }

  targets {
    targetFromPreset(presets.jvm, 'jvm')
    targetFromPreset(presets.js, 'js') {
      tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
        moduleKind = 'umd'
        sourceMap = true
        metaInfo = true
      }
    }
    targetFromPreset(presets.iosX64, 'iosX64')
    targetFromPreset(presets.iosArm32, 'iosArm32')
    targetFromPreset(presets.iosArm64, 'iosArm64')
    targetFromPreset(presets.tvosX64, 'tvosX64')
    targetFromPreset(presets.tvosArm64, 'tvosArm64')
    targetFromPreset(presets.watchosX86, 'watchosX86')
    targetFromPreset(presets.watchosArm32, 'watchosArm32')
    targetFromPreset(presets.watchosArm64, 'watchosArm64')
    targetFromPreset(presets.macosX64, 'macosX64')
  }

  configure([targets.iosX64, targets.iosArm32, targets.iosArm64, targets.tvosX64, targets.tvosArm64, targets.watchosX86, targets.watchosArm32, targets.watchosArm64, targets.macosX64]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test {
      source(sourceSets.nativeTest)
      kotlinOptions.freeCompilerArgs += ['-linker-options', '-lsqlite3']
    }
  }

  sourceSets.matching { it.name.endsWith("Test") }.all {
    it.languageSettings {
      useExperimentalAnnotation('kotlin.time.ExperimentalTime')
      useExperimentalAnnotation('kotlinx.coroutines.ExperimentalCoroutinesApi')
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
